/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { TeamLeaderService } from "../teamLeader.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { TeamLeaderCreateInput } from "./TeamLeaderCreateInput";
import { TeamLeader } from "./TeamLeader";
import { TeamLeaderFindManyArgs } from "./TeamLeaderFindManyArgs";
import { TeamLeaderWhereUniqueInput } from "./TeamLeaderWhereUniqueInput";
import { TeamLeaderUpdateInput } from "./TeamLeaderUpdateInput";
import { TeamFindManyArgs } from "../../team/base/TeamFindManyArgs";
import { Team } from "../../team/base/Team";
import { TeamWhereUniqueInput } from "../../team/base/TeamWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class TeamLeaderControllerBase {
  constructor(
    protected readonly service: TeamLeaderService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TeamLeader })
  @nestAccessControl.UseRoles({
    resource: "TeamLeader",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createTeamLeader(
    @common.Body() data: TeamLeaderCreateInput
  ): Promise<TeamLeader> {
    return await this.service.createTeamLeader({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [TeamLeader] })
  @ApiNestedQuery(TeamLeaderFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "TeamLeader",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async teamLeaders(@common.Req() request: Request): Promise<TeamLeader[]> {
    const args = plainToClass(TeamLeaderFindManyArgs, request.query);
    return this.service.teamLeaders({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TeamLeader })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TeamLeader",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async teamLeader(
    @common.Param() params: TeamLeaderWhereUniqueInput
  ): Promise<TeamLeader | null> {
    const result = await this.service.teamLeader({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TeamLeader })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TeamLeader",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateTeamLeader(
    @common.Param() params: TeamLeaderWhereUniqueInput,
    @common.Body() data: TeamLeaderUpdateInput
  ): Promise<TeamLeader | null> {
    try {
      return await this.service.updateTeamLeader({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TeamLeader })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TeamLeader",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteTeamLeader(
    @common.Param() params: TeamLeaderWhereUniqueInput
  ): Promise<TeamLeader | null> {
    try {
      return await this.service.deleteTeamLeader({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/teams")
  @ApiNestedQuery(TeamFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Team",
    action: "read",
    possession: "any",
  })
  async findTeams(
    @common.Req() request: Request,
    @common.Param() params: TeamLeaderWhereUniqueInput
  ): Promise<Team[]> {
    const query = plainToClass(TeamFindManyArgs, request.query);
    const results = await this.service.findTeams(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        name: true,

        teamLeader: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/teams")
  @nestAccessControl.UseRoles({
    resource: "TeamLeader",
    action: "update",
    possession: "any",
  })
  async connectTeams(
    @common.Param() params: TeamLeaderWhereUniqueInput,
    @common.Body() body: TeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      teams: {
        connect: body,
      },
    };
    await this.service.updateTeamLeader({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/teams")
  @nestAccessControl.UseRoles({
    resource: "TeamLeader",
    action: "update",
    possession: "any",
  })
  async updateTeams(
    @common.Param() params: TeamLeaderWhereUniqueInput,
    @common.Body() body: TeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      teams: {
        set: body,
      },
    };
    await this.service.updateTeamLeader({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/teams")
  @nestAccessControl.UseRoles({
    resource: "TeamLeader",
    action: "update",
    possession: "any",
  })
  async disconnectTeams(
    @common.Param() params: TeamLeaderWhereUniqueInput,
    @common.Body() body: TeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      teams: {
        disconnect: body,
      },
    };
    await this.service.updateTeamLeader({
      where: params,
      data,
      select: { id: true },
    });
  }
}
