/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  TeamLeader as PrismaTeamLeader,
  Team as PrismaTeam,
} from "@prisma/client";

export class TeamLeaderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TeamLeaderCountArgs, "select">
  ): Promise<number> {
    return this.prisma.teamLeader.count(args);
  }

  async teamLeaders(
    args: Prisma.TeamLeaderFindManyArgs
  ): Promise<PrismaTeamLeader[]> {
    return this.prisma.teamLeader.findMany(args);
  }
  async teamLeader(
    args: Prisma.TeamLeaderFindUniqueArgs
  ): Promise<PrismaTeamLeader | null> {
    return this.prisma.teamLeader.findUnique(args);
  }
  async createTeamLeader(
    args: Prisma.TeamLeaderCreateArgs
  ): Promise<PrismaTeamLeader> {
    return this.prisma.teamLeader.create(args);
  }
  async updateTeamLeader(
    args: Prisma.TeamLeaderUpdateArgs
  ): Promise<PrismaTeamLeader> {
    return this.prisma.teamLeader.update(args);
  }
  async deleteTeamLeader(
    args: Prisma.TeamLeaderDeleteArgs
  ): Promise<PrismaTeamLeader> {
    return this.prisma.teamLeader.delete(args);
  }

  async findTeams(
    parentId: string,
    args: Prisma.TeamFindManyArgs
  ): Promise<PrismaTeam[]> {
    return this.prisma.teamLeader
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .teams(args);
  }
}
